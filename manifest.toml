#:schema https://raw.githubusercontent.com/YunoHost/apps/main/schemas/manifest.v2.schema.json

packaging_format = 2

id = "mastofessb"
name = "Masto-FE (ðŸ¦¥ flavour)"
description.en = "A fork of IceShrimp's Masto-FE Standalone made to work smoothly and intuitively with a GoToSocial instance as the backend and tweaked with GoToSocial-specific features"
description.fr = "Un fork de Masto-FE Standalone d'IceShrimp conÃ§u pour fonctionner de maniÃ¨re fluide et intuitive avec une instance GoToSocial comme backend et peaufinÃ© avec des fonctionnalitÃ©s spÃ©cifiques Ã  GoToSocial"

version = "20250714~ynh1"

maintainers = ["trendless"]

[upstream]
# NB: Only the "license" key is mandatory. Remove entries for which there's no relevant data
license = "AGPL-3.0" # you can see the available licenses identifiers list here: https://spdx.org/licenses/
# website = ""
demo = "https://masto-fe.superseriousbusiness.org/"
# admindoc = ""
# userdoc = ""
code = "https://codeberg.org/superseriousbusiness/masto-fe-standalone"
# FIXME: optional but recommended if relevant, this is meant to contain the Common Platform Enumeration, which is
# sort of a standard id for applications defined by the NIST. In particular, YunoHost may use this is in the future
# to easily track CVE (=security reports) related to apps. The CPE may be obtained by searching here:
# https://nvd.nist.gov/products/cpe/search.
# For example, for Nextcloud, the CPE is 'cpe:2.3:a:nextcloud:nextcloud' (no need to include the version number)
# cpe = "???"

# FIXME: optional but recommended (or remove if irrelevant / not applicable).
# This is meant to be an URL where people can financially support this app, especially when its development is based
# on volunteers and/or financed by its community. YunoHost may later advertise it in the webadmin.
# fund = "???"

[integration]
yunohost = ">= 12.0.9"
helpers_version = "2.1"
# FIXME: can be replaced by a list of supported archs using the dpkg --print-architecture nomenclature (amd64/i386/armhf/arm64), for example: ["amd64", "i386"]
architectures = "all"
multi_instance = true

# FIXME: replace with true, false, or "not_relevant".
# Not to confuse with the "sso" key: the "ldap" key corresponds to wether or not a user *can* login on the app using
# its YunoHost credentials.
ldap = "false"

# FIXME: replace with true, false, or "not_relevant".
# Not to confuse with the "ldap" key: the "sso" key corresponds to wether or not a user is *automatically logged-in*
# on the app when logged-in on the YunoHost portal.
sso = "false"

# FIXME: replace with an **estimate** minimum disk and RAM requirements. e.g. 20M, 400M, 1G...
disk = "50M"
ram.build = "100M"
ram.runtime = "50M"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

    [install.path]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "path"
    default = "/masto-fe"

    [install.init_main_permission]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # This won't be saved as setting and will instead be used to initialize the SSOwat permission
    type = "group"
    default = "visitors"

    # [install.language]
    # ask.en = "Choose the application language"
    # type = "select"
    # choices = ["en"]
    # default = "en"

    # [install.admin]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # type = "user"

    # [install.password]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    # help.en = "Use the help field to add an information for the admin about this question."
    # help.fr = "Utilisez le champ aide pour ajouter une information Ã  l'intention de l'administrateur Ã  propos de cette question."
    # type = "password"

[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those

    [resources.sources]

        [resources.sources.main]
        # This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
        #    ynh_setup_source --dest_dir="$install_dir"
        # You can also define other assets than "main" and add --source_id="foobar" in the previous command
        url = "https://github.com/trendless/ex_ynh/raw/refs/heads/main/ynh-release/masto-fe-standalone-main-110c8fb8cc.tar.gz"
        sha256 = "7a68f8d562ecd882af76e46efd902814ae039206cb8cb2535fd7f85364d4365c"

        # These infos are used by https://github.com/YunoHost/apps_tools/blob/main/autoupdate_app_sources/autoupdate_app_sources.py
        # to auto-update the previous asset urls and sha256sum + manifest version
        # assuming the upstream's code repo is on github and relies on tags or releases
        # See the 'sources' resource documentation for more details

        autoupdate.strategy = "latest_github_release"
        autoupdate.asset = ".*\\.tar\\.gz"

    [resources.system_user]
    # This will provision/deprovision a unix system user

    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir
    group = "www-data:r-x"

    # [resources.data_dir]
    # This will create/remove the data dir as /home/yunohost.app/$app
    # and store the corresponding setting $data_dir

    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"

    # [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting

    [resources.apt]
    # This will automatically install/uninstall the following apt packages
    # and implicitly define the $phpversion setting as 8.0 (if phpX.Y-foobar dependencies are listed)
    # packages = "mariadb-server, deb1, deb2, php8.3-foo, php8.3-bar"

        [resources.apt.extras.yarn]
        repo = "deb https://dl.yarnpkg.com/debian/ stable main"
        key = "https://dl.yarnpkg.com/debian/pubkey.gpg"
        packages = "yarn"

    # [resources.database]
    # This will automatically provision/deprovison a MySQL DB and store the corresponding credentials in settings $db_user, $db_name, $db_pwd
    # type = "mysql"

    [resources.nodejs]
    version = "20"
